# BUILD BASE IMAGE
FROM docker.io/nathanhess/slurm:full-root AS stage-base

# Install packages from from distribution repos
# * OpenSSH server
# * sudo
# Also remove SSH host keys auto-generated during install. SSH host keys should 
# be generated on container startup or mounted into the container to prevent
# fixed keys from being baked into the container image.
RUN <<EOF
apt-get update && apt-get install --assume-yes --no-install-recommends \
  openssh-server \
  sudo
apt-get clean
rm -rf /var/lib/apt/lists/*
rm /etc/ssh/ssh_host_*
EOF

# Create directory for installing supporting tools and data for Jupyter
ENV OPT_JUPYTER_DIR=/opt/jupyter
RUN mkdir -p ${OPT_JUPYTER_DIR}

# Install slurmspawner_wrappers Python package in venv
ENV SLURMSPAWNER_VENV_DIR=${OPT_JUPYTER_DIR}/slurmspawner_wrappers
RUN <<EOF
python3 -m venv --upgrade-deps ${SLURMSPAWNER_VENV_DIR}
${SLURMSPAWNER_VENV_DIR}/bin/python -m pip install "slurmspawner_wrappers @ git+https://github.com/isambard-sc/slurmspawner_wrappers.git"
EOF

# Install Miniforge
ENV MINIFORGE_PREFIX_DIR=${OPT_JUPYTER_DIR}/miniforge3
RUN --mount=type=tmpfs,dst=/tmp/download <<EOF
curl --fail --silent --show-error --location --output "/tmp/download/Miniforge3-latest.sh" "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
bash /tmp/download/Miniforge3-latest.sh -b -p ${MINIFORGE_PREFIX_DIR}
EOF

# Install Jupyter user environment
COPY jupyter-user-env.yaml ${OPT_JUPYTER_DIR}/jupyter-user-env.yaml
RUN <<EOF
. ${OPT_JUPYTER_DIR}/miniforge3/bin/activate
conda env create --file="${OPT_JUPYTER_DIR}/jupyter-user-env.yaml"
EOF

# Update sshd config to prevent password auth and increase log verbosity
RUN cat > /etc/ssh/sshd_config.d/custom.conf <<EOF
PasswordAuthentication no
LogLevel VERBOSE
EOF

# Update SSHD_OPTS to set custom log output file for sshd service
RUN sed -E -i -e 's#^SSHD_OPTS=$#&"-E /var/log/sshd.log"#' /etc/default/ssh

# Create jupyterspawner account for JupyterHub to spawn Slurm jobs
# Note the user is created without a password, but SSH login is possible
RUN useradd --create-home \
  --comment "JupyterHub job spawning service account" \
  --home-dir /home/jupyterspawner \
  --user-group \
  --shell /bin/bash \
  jupyterspawner

# Create jupyterusers group
RUN groupadd jupyterusers

# Install sudoers configuration to enable jupyterspawner to run
# slurmspawner_wrappers scripts on behalf of users in jupyterusers group without
# a password, passing through environment variables required by the spawned 
# single-user Jupyter server
COPY --chmod=0600 jupyterspawner_sudoers /etc/sudoers.d/00_jupyterspawner
# Use sed to insert the value of the environment variable SLURMSPAWNER_VENV_DIR
RUN sed -E -i -e 's#\$\{SLURMSPAWNER_VENV_DIR\}#'"${SLURMSPAWNER_VENV_DIR}"'#' /etc/sudoers.d/00_jupyterspawner

# Add script to fix permissions and ownership on SSH key data mounted into container
COPY --chmod=0700 fix_ssh_perms.sh /usr/local/sbin/fix_ssh_perms.sh

CMD ["/bin/sh", "-c", "/etc/startup.sh; /usr/local/sbin/fix_ssh_perms.sh; service ssh start; tail -f /var/log/slurmctld.log"]

# BUILD DEV IMAGE
# Modify the base image for development
FROM stage-base AS stage-dev

ENV CONTAINER_ENV="dev"

# Create directory to hold data for development (e.g. copies of local repos)
ENV DEV_DATA_DIR=/srv/dev_data
RUN mkdir -p ${DEV_DATA_DIR}

# Copy local clone of bricsauthenticator repo from host
COPY _dev_build_data/slurmspawner_wrappers ${DEV_DATA_DIR}/slurmspawner_wrappers

# Remove installed bricsauthenticator and replace with local version from host
RUN <<EOF
${SLURMSPAWNER_VENV_DIR}/bin/python -m pip uninstall --yes --root-user-action=ignore slurmspawner_wrappers
${SLURMSPAWNER_VENV_DIR}/bin/python -m pip install --no-cache-dir --root-user-action=ignore --editable \
  "${DEV_DATA_DIR}/slurmspawner_wrappers[dev]"
EOF

# Copy script for creating test users in dev environment
COPY --chmod=0700 create_dev_users.sh /usr/local/sbin/create_dev_users.sh

# Execute test users creation script as part of default startup command
CMD ["/bin/sh", "-c", "/etc/startup.sh; /usr/local/sbin/fix_ssh_perms.sh; /usr/local/sbin/create_dev_users.sh; service ssh start; tail -f /var/log/slurmctld.log"]

# BUILD PROD IMAGE
# Modify the base image for production
FROM stage-base AS stage-prod

ENV CONTAINER_ENV="prod"
